--- original/net/minecraft/network/NetworkManager.java
+++ changed/net/minecraft/network/NetworkManager.java
@@ -2,6 +2,8 @@
 
 import com.google.common.collect.Queues;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import dev.minecraftbox.event.EventBus;
+import dev.minecraftbox.event.events.networking.PacketSendEvent;
 import io.netty.bootstrap.Bootstrap;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelException;
@@ -51,7 +53,7 @@
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
 
-public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
+public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     private static final Logger logger = LogManager.getLogger();
     public static final Marker logMarkerNetwork = MarkerManager.getMarker("NETWORK");
     public static final Marker logMarkerPackets = MarkerManager.getMarker("NETWORK_PACKETS", logMarkerNetwork);
@@ -146,10 +148,13 @@
         this.packetListener = handler;
     }
 
-    public void sendPacket(Packet packetIn) {
+    public void sendPacket(Packet<?> packetIn) {
+        PacketSendEvent packetSendEvent = new PacketSendEvent(packetIn);
+        EventBus.INSTANCE.post(packetSendEvent);
+        if (packetSendEvent.isCancelled()) return;
         if (this.isChannelOpen()) {
             this.flushOutboundQueue();
-            this.dispatchPacket(packetIn, (GenericFutureListener <? extends Future <? super Void >> [])null);
+            this.dispatchPacket(packetIn, null);
         } else {
             this.readWriteLock.writeLock().lock();
 
@@ -161,10 +166,14 @@
         }
     }
 
-    public void sendPacket(Packet packetIn, GenericFutureListener <? extends Future <? super Void >> listener, GenericFutureListener <? extends Future <? super Void >> ... listeners) {
+    @SafeVarargs
+    public final void sendPacket(Packet<?> packetIn, GenericFutureListener<? extends Future<? super Void>> listener, GenericFutureListener<? extends Future<? super Void>>... listeners) {
+        PacketSendEvent packetSendEvent = new PacketSendEvent(packetIn);
+        EventBus.INSTANCE.post(packetSendEvent);
+        if (packetSendEvent.isCancelled()) return;
         if (this.isChannelOpen()) {
             this.flushOutboundQueue();
-            this.dispatchPacket(packetIn, (GenericFutureListener[])ArrayUtils.add(listeners, 0, listener));
+            this.dispatchPacket(packetIn, ArrayUtils.add(listeners, 0, listener));
         } else {
             this.readWriteLock.writeLock().lock();
 
@@ -416,6 +425,7 @@
             private final Packet packet;
             private final GenericFutureListener <? extends Future <? super Void >> [] futureListeners;
 
+            @SafeVarargs
             public InboundHandlerTuplePacketListener(Packet inPacket, GenericFutureListener <? extends Future <? super Void >> ... inFutureListeners) {
                 this.packet = inPacket;
                 this.futureListeners = inFutureListeners;
