--- original/net/minecraft/client/resources/Locale.java
+++ changed/net/minecraft/client/resources/Locale.java
@@ -19,7 +19,7 @@
 public class Locale {
     /** Splits on "=" */
     private static final Splitter splitter = Splitter.on('=').limit(2);
-    private static final Pattern pattern = Pattern.compile("%(\\d+\\$)?[\\d\\.]*[df]");
+    private static final Pattern pattern = Pattern.compile("%(\\d+\\$)?[\\d.]*[df]");
     Map<String, String> properties = Maps.<String, String>newHashMap();
     private boolean unicode;
 
@@ -30,13 +30,12 @@
         this.properties.clear();
 
         for (String s : languageList) {
-            String s1 = String.format("lang/%s.lang", new Object[] {s});
+            String s1 = String.format("lang/%s.lang", s);
 
             for (String s2 : resourceManager.getResourceDomains()) {
                 try {
                     this.loadLocaleData(resourceManager.getAllResources(new ResourceLocation(s2, s1)));
-                } catch (IOException var9) {
-                    ;
+                } catch (IOException ignored) {
                 }
             }
         }
@@ -86,7 +85,7 @@
     private void loadLocaleData(InputStream inputStreamIn) throws IOException {
         for (String s : IOUtils.readLines(inputStreamIn, Charsets.UTF_8)) {
             if (!s.isEmpty() && s.charAt(0) != 35) {
-                String[] astring = (String[])Iterables.toArray(splitter.split(s), String.class);
+                String[] astring = Iterables.toArray(splitter.split(s), String.class);
 
                 if (astring != null && astring.length == 2) {
                     String s1 = astring[0];
@@ -101,7 +100,7 @@
      * Returns the translation, or the key itself if the key could not be translated.
      */
     private String translateKeyPrivate(String translateKey) {
-        String s = (String)this.properties.get(translateKey);
+        String s = this.properties.get(translateKey);
         return s == null ? translateKey : s;
     }
 
