--- original/net/minecraft/client/entity/EntityPlayerSP.java
+++ changed/net/minecraft/client/entity/EntityPlayerSP.java
@@ -1,5 +1,10 @@
 package net.minecraft.client.entity;
 
+import dev.minecraftbox.event.EventBus;
+import dev.minecraftbox.event.events.chat.PlayerChatEvent;
+import dev.minecraftbox.event.events.player.PlayerDamageEntityEvent;
+import dev.minecraftbox.event.events.player.PlayerRespawnEvent;
+import dev.minecraftbox.event.events.player.PlayerSwingItemEvent;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.audio.MovingSoundMinecartRiding;
 import net.minecraft.client.audio.PositionedSoundRecord;
@@ -249,6 +254,9 @@
      * Sends a chat message from the player. Args: chatMessage
      */
     public void sendChatMessage(String message) {
+        PlayerChatEvent playerChatEvent = new PlayerChatEvent(message);
+        EventBus.INSTANCE.post(playerChatEvent);
+        if (playerChatEvent.isCancelled()) return;
         this.sendQueue.addToSendQueue(new C01PacketChatMessage(message));
     }
 
@@ -256,11 +264,15 @@
      * Swings the item the player is holding.
      */
     public void swingItem() {
+        PlayerSwingItemEvent playerSwingItemEvent = new PlayerSwingItemEvent();
+        EventBus.INSTANCE.post(playerSwingItemEvent);
+        if (playerSwingItemEvent.isCancelled()) return;
         super.swingItem();
         this.sendQueue.addToSendQueue(new C0APacketAnimation());
     }
 
     public void respawnPlayer() {
+        EventBus.INSTANCE.post(new PlayerRespawnEvent());
         this.sendQueue.addToSendQueue(new C16PacketClientStatus(C16PacketClientStatus.EnumState.PERFORM_RESPAWN));
     }
 
@@ -269,6 +281,7 @@
      * with the reduced value. Args: damageAmount
      */
     protected void damageEntity(DamageSource damageSrc, float damageAmount) {
+        EventBus.INSTANCE.post(new PlayerDamageEntityEvent(damageSrc, damageAmount));
         if (!this.isEntityInvulnerable(damageSrc)) {
             this.setHealth(this.getHealth() - damageAmount);
         }
@@ -364,12 +377,10 @@
     }
 
     protected boolean pushOutOfBlocks(double x, double y, double z) {
-        if (this.noClip) {
-            return false;
-        } else {
+        if (!this.noClip) {
             BlockPos blockpos = new BlockPos(x, y, z);
-            double d0 = x - (double)blockpos.getX();
-            double d1 = z - (double)blockpos.getZ();
+            double d0 = x - (double) blockpos.getX();
+            double d1 = z - (double) blockpos.getZ();
 
             if (!this.isOpenBlockSpace(blockpos)) {
                 int i = -1;
@@ -398,24 +409,24 @@
                 float f = 0.1F;
 
                 if (i == 0) {
-                    this.motionX = (double)(-f);
+                    this.motionX = (double) (-f);
                 }
 
                 if (i == 1) {
-                    this.motionX = (double)f;
+                    this.motionX = (double) f;
                 }
 
                 if (i == 4) {
-                    this.motionZ = (double)(-f);
+                    this.motionZ = (double) (-f);
                 }
 
                 if (i == 5) {
-                    this.motionZ = (double)f;
+                    this.motionZ = (double) f;
                 }
             }
 
-            return false;
         }
+        return false;
     }
 
     /**
@@ -560,7 +571,7 @@
      * Returns if this entity is sneaking.
      */
     public boolean isSneaking() {
-        boolean flag = this.movementInput != null ? this.movementInput.sneak : false;
+        boolean flag = this.movementInput != null && this.movementInput.sneak;
         return flag && !this.sleeping;
     }
 
